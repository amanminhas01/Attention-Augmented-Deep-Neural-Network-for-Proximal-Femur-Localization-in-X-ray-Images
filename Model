import torchvision
import torch
from config import DEVICE, NUM_CLASSES, NUM_WORKERS
#from torchvision.models.detection.retinanet import retinanet_resnet152_fpn_v2
from functools import partial
from torchvision.models.detection.retinanet import RetinaNetClassificationHead
from AADNN import AADNN  
def create_model(num_classes=NUM_CLASSES):  #  retinanet_resnet50_2_fpn_v2  ,  retinanet_resnet152_fpn_v2  ,  retinanet_resnet101_2_fpn_v2
    model = torchvision.models.detection.retinanet.retinanet_resnet101_2_fpn_v2   (
          pretrained_backbone=True
      )
    num_anchors = model.head.classification_head.num_anchors

    model.head.classification_head = RetinaNetClassificationHead(
        in_channels=256,
        num_anchors=num_anchors,
        num_classes=num_classes,
        norm_layer=partial(torch.nn.GroupNorm, 32)
    )


    model.backbone.body.layer4[-1] = AADNN(2048)
    return model

if __name__ == '__main__':
    model = create_model(1)
    print(model)
    # Total parameters and trainable parameters.
    total_params = sum(p.numel() for p in model.parameters())
    print(f"{total_params:,} total parameters.")
    total_trainable_params = sum(
        p.numel() for p in model.parameters() if p.requires_grad)
    print(f"{total_trainable_params:,} training parameters.")
